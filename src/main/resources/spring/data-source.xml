<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
  ">

    <bean id="defaultDataSource" class="com.alibaba.druid.pool.DruidDataSource"
        init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver.classname}"></property>

        <!--连接池启动时的初始值 -->
        <property name="initialSize" value="3"/>
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="100"/>
        <!-- 最小空闲. 连接数少于阈值时, 会去申请, 预防洪峰 -->
        <property name="minIdle" value="3"/>
        <!-- 连接池中连接用完, 新请求的等待时间， ms -->
        <property name="maxWait" value="2000"/>

        <property name="validationQuery" value="select 1"/>
        <!-- 取出连接时进行有效验证 -->
        <property name="testOnBorrow" value="true"/>
        <!-- 超过特定空闲时间, 连接开始被关闭 -->
        <property name="removeAbandonedTimeout" value="120"/>
        <!-- 关闭abanded连接时输出错误日志，这样出现连接泄露时可以通过错误日志定位忘记关闭连接的位置 -->
        <property name="logAbandoned" value="true"/>
        <!-- 配置间隔多久启动一次DestroyThread，对连接池内的连接才进行一次检测，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="58000"/>
        <!-- 配置一个连接在池中最大空闲时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="60000"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="config"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

    </bean>


    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="defaultDataSource"
          p:configLocation="classpath:/mybatis-conf.xml"
          p:mapperLocations="classpath*:com/xxx/dao/xml/*.xml"
          p:typeAliasesPackage="com.xxx.model" />
    />

    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
        p:dataSource-ref="defaultDataSource" />


    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager">
          <ref bean="txManager" />
        </property>
    </bean>

</beans>